{"version":3,"sources":["index.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;;;IAaE,SAAS,qBAAxB,aAA2B;AACzB,MAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CACzB,KAAK,CAAC,+BAA+B,CAAC,CACtC,OAAO,CAAC,MAAM,EAAE,8EAA8E,CAAC,CAC/F,OAAO,CAAC,OAAO,EAAE,yEAAyE,CAAC,CAC3F,OAAO,CAAC,aAAa,EAAE,iEAAiE,CAAC,CACzF,OAAO,CAAC,eAAe,EAAE,mEAAmE,CAAC,CAC7F,OAAO,CAAC,GAAG,EAAE;AACZ,SAAK,EAAE,WAAW;AAClB,YAAQ,EAAE,yGAAyG;AACnH,eAAS,EAAE;AACX,QAAI,EAAE,QAAQ;GACf,CAAC,CACD,IAAI,CAAC,GAAG,CAAC,CACT,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEtB,MAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AACtB,MAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAExB,UAAQ,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCb,SAAK,aAAa;AAAE;AAClB,cAAM,2BAA2B,EAAE,CAAC;;;;;;;;;;;;;;;AAepC,cAAM,wCAAoB;AACxB,oBAAU,EAAE,MAAM;AAClB,iBAAO,EAAE;AACP,sBAAU,EAAE,SAAS;WACtB;AACD,aAAG,EAAE;AACH,sBAAU,EAAE,SAAS;WACtB;SACF,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;;AAEhB,cAAM;OACP;;AAAA;;;;;;;AASD,SAAK,IAAI;AAAE;AACT,eAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAC5B,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChB,cAAM;OACP;;AAAA,AAED;AAAS;AACP,eAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAChE,eAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChB,cAAM;OACP;AAAA,GACF;CACF;;IAEc,2BAA2B,qBAA1C,aAA6C;AAC3C,MAAI;AACF,UAAM,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;GACzC,CAAC,OAAO,KAAK,EAAE;AACd,WAAO,CAAC,KAAK,CAAC,iFAAiF,CAAC,CAAC;AACjG,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB;CACF;;6BAjHmC,iBAAiB;;AATrD,OAAO,CAAC,cAAc,CAAC,CAAC;;AAExB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEzB,MAAM,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,MAAM,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAC3C,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACjE,MAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;AAqHvC,IAAI,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;AAC3B,WAAS,EAAE,SAAM,CAAC,UAAC,KAAK,EAAK;AAC3B,WAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3B,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;GACjB,CAAC,CAAC;CACJ","file":"index.js","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nrequire('instapromise');\n\nconst fs = require('fs');\n\nconst BuckLoader = require('./BuckLoader');\nconst BuckEditor = require('./BuckEditor');\nconst BuckFragmentGenerator = require('./BuckFragmentGenerator');\nconst Settings = require('./Settings');\n\nimport { createModuleProject } from './ModuleManager';\n\nasync function mainAsync() {\n  let yargs = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('init', 'Initializes the current directory for a project that supports native modules')\n    .command('clean', 'Removes the rem configuration from the project in the current directory')\n    .command('module init', 'Initializes the current directory for a new React Native module')\n    .command('buck-fragment', 'Outputs a code fragment to be evaluated inline within a BUCK file')\n    .options('d', {\n      alias: 'directory',\n      describe: 'Root directory of the JS project, relative to the current working directory. Use with podfile-fragment.',\n      default: '',\n      type: 'string',\n    })\n    .help('h')\n    .alias('h', 'help');\n\n  let argv = yargs.argv;\n  let command = argv._[0];\n\n  switch (command) {\n    // case 'init': {\n    //   await verifyCurrentDirectoryAsync();\n\n    //   let settings = await Settings.loadAsync();\n    //   let buckLoader = new BuckLoader(settings);\n    //   let buckEditor = new BuckEditor(settings);\n    //   let buckFile = await buckLoader.readEnsuredAsync();\n    //   if (buckEditor.hasRemSection(buckFile)) {\n    //     console.log(\"The project's Podfile is already set up with rem.\");\n    //   } else {\n    //     podfile = buckEditor.addRemSection(podfile);\n    //     await buckLoader.writeAsync(podfile);\n    //     console.log(\"The project's Podfile is now set up with rem.\");\n    //   }\n    //   break;\n    // }\n\n    // case 'clean': {\n    //   await verifyCurrentDirectoryAsync();\n\n    //   let settings = await Settings.loadAsync();\n    //   let buckLoader = new BuckLoader(settings);\n    //   let buckEditor = new BuckEditor(settings);\n    //   let buckFile = await buckLoader.readEnsuredAsync();\n    //   if (buckEditor.hasRemSection(buckFile)) {\n    //     buckFile = buckEditor.removeRemSection(buckFile);\n    //     await buckLoader.writeAsync(buckFile);\n    //     console.log(\"The project's Podfile no longer includes rem.\");\n    //   } else {\n    //     console.log(\"The project's Podfile already does not include rem.\");\n    //   }\n    //   break;\n    // }\n    \n    case 'module init': {\n      await verifyCurrentDirectoryAsync();\n\n      // let settings = await Settings.loadAsync();\n      // let buckLoader = new BuckLoader(settings);\n      // let buckEditor = new BuckEditor(settings);\n      // let buckFile = await buckLoader.readEnsuredAsync();\n      // if (buckEditor.hasRemSection(buckFile)) {\n      //   console.log(\"The module has already been initialized.\");\n      // }\n      // else {\n      //   buckFile = buckEditor.addRemSection(buckFile);\n      //   await buckLoader.writeAsync(buckFile);\n      //   console.log(\"The module is now initialized for rem.\");\n      // }\n      \n      await createModuleProject({\n        moduleName: 'Test',\n        android: {\n          moduleName: 'REMTest'\n        },\n        ios: {\n          moduleName: 'REMTest'\n        }\n      }, process.cwd);\n      \n      break;\n    }\n\n    // case 'buck-fragment': {\n    //   let baseDirectory = argv.directory;\n    //   let fragment = await BuckFragmentGenerator.fragmentAsync(baseDirectory);\n    //   console.log(fragment);\n    //   break;\n    // }\n\n    case null: {\n      console.error(yargs.help());\n      process.exit(1);\n      break;\n    }\n\n    default: {\n      console.error('Unknown command: %s\\n%s', command, yargs.help());\n      process.exit(1);\n      break;\n    }\n  }\n}\n\nasync function verifyCurrentDirectoryAsync() {\n  try {\n    await fs.promise.access('package.json');\n  } catch (error) {\n    console.error('package.json not found; run \"rem init\" in the root directory of your JS project');\n    process.exit(1);\n  }\n}\n\nif (module === require.main) {\n  mainAsync().catch((error) => {\n    console.error(error.stack);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/source/"}