{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nrequire('instapromise');\n\nconst fs = require('fs');\nconst stdio = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\n// const BuckLoader = require('./BuckLoader');\n// const BuckEditor = require('./BuckEditor');\n// const BuckFragmentGenerator = require('./BuckFragmentGenerator');\nimport AppManager from './AppManager';\nimport ModuleManager from './ModuleManager';\nimport Settings from './Settings';\n\nasync function mainAsync() {\n  let yargs = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('init', 'Initializes the current directory for a rem-enabled React Native project')\n    .command('clean', 'Removes the rem configuration from the project in the current directory')\n    .command('buck-fragment', 'Outputs a code fragment to be evaluated inline within a BUCK file')\n    .options('d', {\n      alias: 'directory',\n      describe: 'Root directory of the JS project, relative to the current working directory. Use with podfile-fragment.',\n      default: '',\n      type: 'string',\n    })\n    .help('h')\n    .alias('h', 'help');\n\n  let argv = yargs.argv;\n  let command = argv._[0];\n\n  switch (command) {\n    // case 'init': {\n    //   await verifyCurrentDirectoryAsync();\n\n    //   let settings = await Settings.loadAsync();\n    //   let buckLoader = new BuckLoader(settings);\n    //   let buckEditor = new BuckEditor(settings);\n    //   let buckFile = await buckLoader.readEnsuredAsync();\n    //   if (buckEditor.hasRemSection(buckFile)) {\n    //     console.log(\"The project's Podfile is already set up with rem.\");\n    //   } else {\n    //     podfile = buckEditor.addRemSection(podfile);\n    //     await buckLoader.writeAsync(podfile);\n    //     console.log(\"The project's Podfile is now set up with rem.\");\n    //   }\n    //   break;\n    // }\n\n    // case 'clean': {\n    //   await verifyCurrentDirectoryAsync();\n\n    //   let settings = await Settings.loadAsync();\n    //   let buckLoader = new BuckLoader(settings);\n    //   let buckEditor = new BuckEditor(settings);\n    //   let buckFile = await buckLoader.readEnsuredAsync();\n    //   if (buckEditor.hasRemSection(buckFile)) {\n    //     buckFile = buckEditor.removeRemSection(buckFile);\n    //     await buckLoader.writeAsync(buckFile);\n    //     console.log(\"The project's Podfile no longer includes rem.\");\n    //   } else {\n    //     console.log(\"The project's Podfile already does not include rem.\");\n    //   }\n    //   break;\n    // }\n    \n    case 'install': {\n      let npmName = argv._[1];\n      \n      await verifyCurrentDirectoryAsync(\"You must first create your app using the React Native CLI.\");\n        \n      let settings = await Settings.loadAsync();\n      let appManager = new AppManager(settings);\n      \n      if (appManager.isInitialized() && appManager.isApp()) {\n        await appManager.installModule(npmName);\n      }\n      else {\n        console.log(\"This directory is not a rem-enabled app.\");\n      }\n      process.exit(0);\n      \n      break;\n    }\n    \n    case 'init': {\n      let subCommand = argv._[1];\n      // await verifyCurrentDirectoryAsync();\n\n      // let buckLoader = new BuckLoader(settings);\n      // let buckEditor = new BuckEditor(settings);\n      // let buckFile = await buckLoader.readEnsuredAsync();\n      // if (buckEditor.hasRemSection(buckFile)) {\n      //   console.log(\"The module has already been initialized.\");\n      // }\n      // else {\n      //   buckFile = buckEditor.addRemSection(buckFile);\n      //   await buckLoader.writeAsync(buckFile);\n      //   console.log(\"The module is now initialized for rem.\");\n      // }\n      \n      if (subCommand === 'app') {\n        await verifyCurrentDirectoryAsync(\"You must first create your app using the React Native CLI.\");\n        \n        let settings = await Settings.loadAsync();\n        let appManager = new AppManager(settings);\n        if (appManager.isInitialized() && appManager.isApp()) {\n          console.log(\"The app has already been initialized for use with rem.\");\n        }\n        else if (appManager.isInitialized()) {\n          console.log(\"This directory appears to be initialized by rem, but is not an app. Aborting to avoid potentially destructive changes.\");\n        }\n        else {\n          await appManager.createProject();\n          console.log(\"The app is now initialized for rem.\");\n        }\n        process.exit(0);\n      }\n      else if (subCommand === 'module') {\n        await verifyCurrentDirectoryAsync('run \"npm init\" in the root directory of your module');\n      \n        let settings = await Settings.loadAsync();\n        let moduleManager = new ModuleManager(settings);\n        if (moduleManager.isInitialized() && moduleManager.isModule()) {\n          console.log(\"The module has already been initialized.\");\n        }\n        else if (moduleManager.isInitialized()) {\n          console.log(\"This directory appears to be initialized by rem, but is not a module. Aborting to avoid potentially destructive changes.\");\n        }\n        else {\n          stdio.question(\"Set your module's class name (PascalCase, for example: NetworkDiscoverer): \", async (moduleName) => {\n            stdio.question(\"Set your module's package identifier. The last part must match your module's class name. (For example: com.example.NetworkDiscoverer): \", async (packageIdentifier) => {\n              await moduleManager.createProject({\n                npmName: settings.npm.name,\n                moduleName,\n                android: {\n                  moduleName,\n                  packageIdentifier\n                },\n                ios: {\n                  moduleName: `REM${moduleName}`,\n                  packageIdentifier\n                }\n              });\n              console.log(\"The module is now initialized for rem.\");\n              process.exit(0);\n            });\n          });\n        }\n      }\n      \n      \n      \n      break;\n    }\n\n    // case 'buck-fragment': {\n    //   let baseDirectory = argv.directory;\n    //   let fragment = await BuckFragmentGenerator.fragmentAsync(baseDirectory);\n    //   console.log(fragment);\n    //   break;\n    // }\n\n    case null: {\n      console.error(yargs.help());\n      process.exit(1);\n      break;\n    }\n\n    default: {\n      console.error('Unknown command: %s\\n%s', command, yargs.help());\n      process.exit(1);\n      break;\n    }\n  }\n}\n\nasync function verifyCurrentDirectoryAsync(message) {\n  try {\n    await fs.promise.access('package.json');\n  } catch (error) {\n    message = message || 'run \"rem init\" in the root directory of your JS project';\n    console.error(`package.json not found; ${message}`);\n    process.exit(1);\n  }\n}\n\nif (module === require.main) {\n  mainAsync().catch((error) => {\n    console.error(error.stack);\n    process.exit(1);\n  });\n}\n"],"sourceRoot":"/source/"}