{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nimport path from 'path';\n\nimport * as BuckManager from './BuckManager';\nimport * as PackageLoader from './PackageLoader';\n\nconst fs = require('fs');\nconst stdio = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nasync function mainAsync() {\n  let yargs = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('init', 'Initializes the current directory for a rem-enabled React Native project')\n    .command('clean', 'Removes the rem configuration from the project in the current directory')\n    .command('buck-fragment', 'Outputs a code fragment to be evaluated inline within a BUCK file')\n    .options('d', {\n      alias: 'directory',\n      describe: 'Root directory of the JS project, relative to the current working directory. Use with podfile-fragment.',\n      default: '',\n      type: 'string',\n    })\n    .help('h')\n    .alias('h', 'help');\n\n  let argv = yargs.argv;\n  let command = argv._[0];\n\n  switch (command) {\n\n    case 'install': {\n      console.log('Installing...');\n      let rootDirectory = process.cwd();\n      let remDirectory = path.join(rootDirectory, '.rem');\n      let nodeModulesDirectory = path.join(rootDirectory, 'node_modules');\n      let projectPackage = await PackageLoader.getProjectPackage(rootDirectory);\n      let isREMSupported = projectPackage.nativePackage && projectPackage.nativePackage.targetDirectories;\n      \n      if (!isREMSupported) {\n        console.error('REM is not supported for the current project, please follow the steps in REM\\'s readme.');\n        break;\n      }\n      \n      let packages = await PackageLoader.getREMCompatiblePackages(nodeModulesDirectory);\n      let targetDirectories = projectPackage.nativePackage.targetDirectories;\n      let targets = {};\n      \n      Object.keys(targetDirectories).forEach(target => {\n        targets[target] = {\n          directory: targetDirectories[target],\n          packages: PackageLoader.filterByTarget(packages, target)\n        };\n      });\n      \n      let buckDefinitions = BuckManager.buildDefinitionsForTargets(targets, nodeModulesDirectory);\n      await BuckManager.writeDefinitions(buckDefinitions, remDirectory);\n      \n      break;\n    }\n\n    case null: {\n      console.error(yargs.help());\n      process.exit(1);\n      break;\n    }\n\n    default: {\n      console.error('Unknown command: %s\\n%s', command, yargs.help());\n      process.exit(1);\n      break;\n    }\n  }\n}\n\nmainAsync().catch(err => {\n  console.error(err.stack);\n  process.exit(1);\n});\n\n// 0. The React Native app must have the following:\n\n// > `/package.json`\n// {\n//   reactNative: {\n//     targetDirectories: {\n//       android: './android',\n//       ios: './ios'\n//     }\n//   }\n// }\n\n// > `/android/BUCK`\n// `android_binary` needs to include `/.rem/android/BUCK` as a dependency\n\n// > `/ios/BUCK`\n// `apple_binary` needs to include `/.rem/ios/BUCK` as a dependency\n\n// > `/.rem/android/BUCK`\n// Unsure which build command to use (`android_library`?) This file contains an automatically\n// generated target(s) which includes all the 3rd party modules as dependencies\n\n// > `/.rem/ios/BUCK`\n// Unsure which build command to use (`apple_library`?) This file contains an automatically\n// generated target(s) which includes all the 3rd party modules as dependencies\n\n// REM's job:\n// 1. Get app's target platforms by checking its `package.json` for `reactNative->targetDirectories`\n// 2. Get compatible packages from node_modules (has `reactNative` property in `package.json`\n// and supports at least 1 of the app's specified platforms)\n// 3. Add each module's `BUCK` file locations (specified in their `package.json`\n// (`reactNative->targetDirectories`)) for each target to the `.rem/[target]/BUCK` file\n// which is dynamically generated each time the installer is run\n\n// Running `buck build` on any of the app's target directories (`android`, `ios`, etc.) will pull\n// in the dependencies specified in the generated `.rem/[target]/BUCK` file and build the app."],"sourceRoot":"/source/"}