{"version":3,"sources":["PodfileFragmentGenerator.coffee"],"names":[],"mappings":"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","file":"PodfileFragmentGenerator.js","sourceRoot":"/source/","sourcesContent":["#!/usr/bin/env coffee\n__doc__ = \"\"\"\nGenerates a fragment of a Podfile on the fly that lists\nall the dependencies needed by the nativePackages under\nnode_modules\n\n\"\"\"\n\nassert = require 'assert'\nco = require 'co'\nfs = require 'fs'\ninstapromise = require 'instapromise'\n{\n  isString\n} = require 'lodash-node'\npath = require 'path'\nutil = require 'util'\n\nfindNativePackagesAsync = co.wrap (dir='.') ->\n  \"\"\"Finds all the React Native modules from a given directory\"\"\"\n\n  foundModules = []\n\n  pkg = yield jsonAsync path.join dir, 'package.json'\n  if pkg.nativePackage?\n    foundModules.push {\n      path: path.relative '.', dir\n      name: pkg.name\n      version: pkg.version\n      nativePackage: pkg.nativePackage\n      pkg\n    }\n\n  node_modules = path.join dir, 'node_modules'\n\n  if fs.existsSync node_modules # N.B. Watch out for `fs.exists` -- it doesn't conform to the (err, result) protocol\n    awaitables = []\n    for mod in yield fs.promise.readdir node_modules\n      unless mod[0] is '.' # Ignore hidden files/dirs like '.bin'\n        awaitables.push findNativePackagesAsync path.join node_modules, mod\n\n    foundModules.concat (yield awaitables)...\n  else\n    foundModules\n\nrubyEscapeString = (s) ->\n  \"\"\"Escapes a string for Ruby (for use in Podfiles)\"\"\"\n\n  # This is a little bit of a hack but it should be correct\n  assert isString s\n  util.inspect s\n\njsonAsync = co.wrap (filepath) ->\n  \"\"\"Returns the JSON object from a given JSON file asynchronously\"\"\"\n\n  json = yield fs.promise.readFile filepath, 'utf8'\n  try\n    JSON.parse json\n  catch e\n    throw new Error \"#{ util.inspect e } in #{ path.resolve filepath }\"\n\npodfileFragmentAsync = co.wrap (dir='.') ->\n  \"\"\"Returns the text of the Podfile we use for Rem\"\"\"\n\n  nativePackages = yield findNativePackagesAsync dir\n  podspecs = []\n  for np in nativePackages\n    if np.nativePackage.podspec?\n      podspecs.push [np.name, path.join np.path, np.nativePackage.podspec]\n    else\n      defaultPodspec = path.join np.path, \"#{ np.name }.podspec\"\n      if fs.existsSync defaultPodspec\n        podspecs.push [np.name, defaultPodspec]\n\n  pkg = yield jsonAsync path.join dir, 'package.json'\n  reactNativeApp = pkg.reactNativeApp\n  reactNativePath = reactNativeApp?.reactNativePath ? 'node_modules/react-native'\n\n  \"\"\"\n  # Generated by rem for #{ pkg.name }\n  REACT_NATIVE_PATH = #{ rubyEscapeString reactNativePath }\n  pod 'React', :path => REACT_NATIVE_PATH\n  pod 'React/RCTImage', :path => REACT_NATIVE_PATH\n  pod 'React/RCTText', :path => REACT_NATIVE_PATH\n  #{(\"pod #{ rubyEscapeString name }, :path => #{ rubyEscapeString podspecPath }\\n\" for [name, podspecPath] in podspecs).join ''}\n  \"\"\"\n\nmodule.exports = {\n  findNativePackagesAsync\n  podfileFragmentAsync\n  jsonAsync\n}\n"]}