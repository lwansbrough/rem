{"version":3,"sources":["PackageLoader.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAGe,cAAc,qBAA7B,WAA8B,oBAAoB,EAAE;AAClD,SAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,oBAAG,OAAO,CAAC,oBAAoB,EAAE,UAAC,GAAG,EAAE,KAAK,EAAK;AAC/C,UAAI,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAO,CAAC,KAAK,CAAC,CAAC;KAChB,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;IAEc,YAAY,qBAA3B,WAA4B,IAAI,EAAE;AAChC,SAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,oBAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACrD,UAAI,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;KAC3B,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;IAEqB,iBAAiB,qBAAhC,WAAiC,aAAa,EAAE;AACrD,SAAO,MAAM,YAAY,CAAC,kBAAK,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,CAAC;CACrE;;;;IAEqB,wBAAwB,qBAAvC,WAAwC,oBAAoB,EAAE;AACnE,MAAI,YAAY,GAAG,MAAM,cAAc,CAAC,oBAAoB,CAAC,CAAC;AAC9D,MAAI,kBAAkB,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,CAAC;WAAI,kBAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC,EAAE,cAAc,CAAC;GAAA,CAAC,CAAC;AACnG,MAAI,cAAc,GAAG,MAAM,SAAQ,GAAG,CAAC,kBAAkB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;AAC7E,SAAO,cAAc,CAAC,MAAM,CAAC,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC,CAAC,aAAa;GAAA,CAAC,CAAC;CACtD;;;;;kBA9Bc,IAAI;;;;oBACF,MAAM;;;;AA+BhB,SAAS,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE;AAC/C,MAAI,gBAAgB,GAAG,QAAQ,CAC5B,MAAM,CAAC,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC,CAAC,aAAa;GAAA,CAAC,CAC9B,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAK;AACrB,iBAAY,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AAC7D,SAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACtB,SAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB,CAAC,CAAC;AACH,WAAO,GAAG,CAAC;GACZ,EAAE,EAAE,CAAC,CAAC;AACT,SAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;CACjC","file":"PackageLoader.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nasync function getAllPackages(nodeModulesDirectory) {\n  return new Promise((resolve, reject) => {\n    fs.readdir(nodeModulesDirectory, (err, files) => {\n      if (err) return reject(err);\n      resolve(files);\n    });\n  });\n}\n\nasync function readJSONFile(file) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n      resolve(JSON.parse(data));\n    });\n  });\n}\n\nexport async function getProjectPackage(rootDirectory) {\n  return await readJSONFile(path.join(rootDirectory, 'package.json'));\n}\n\nexport async function getREMCompatiblePackages(nodeModulesDirectory) {\n  let packageFiles = await getAllPackages(nodeModulesDirectory);\n  let packageConfigFiles = packageFiles.map(f => path.join(nodeModulesDirectory, f, 'package.json'));\n  let packageConfigs = await Promise.all(packageConfigFiles.map(readJSONFile));\n  return packageConfigs.filter(p => !!p.nativePackage);\n}\n\nexport function filterByTarget(packages, target) {\n  let packagesByTarget = packages\n    .filter(p => !!p.nativePackage)\n    .reduce((obj, pack) => {\n      Object.keys(pack.nativePackage.targetDirectories).forEach(t => {\n        obj[t] = obj[t] || [];\n        obj[t].push(pack);\n      });\n      return obj;\n    }, {});\n  return packagesByTarget[target];\n}"],"sourceRoot":"/source/"}