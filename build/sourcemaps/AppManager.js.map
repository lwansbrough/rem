{"version":3,"sources":["AppManager.js"],"names":[],"mappings":"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","file":"AppManager.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { build } from './templates/app';\nimport Settings from './Settings';\n\nasync function readAsync(path) {\n  try {\n    return await fs.promise.readFile(path, 'utf8');\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport default class AppManager {\n  \n  constructor(settings) {\n    this.settings = settings;\n  }\n  \n  async createProject(config) {\n    // We could use this.settings.npm but we should refetch it to ensure we're getting the most\n    // recent changes (user could have left the terminal idle while performing other tasks)\n    let packageJSONPath = path.join(this.settings.baseDirectory, 'package.json');\n    let packageJSON = JSON.parse(await readAsync(packageJSONPath));\n    \n    packageJSON.rem = Settings.generateAppSettings();\n\n    await fs.promise.writeFile(packageJSONPath, JSON.stringify(packageJSON, null, 2), 'utf8');\n    \n    return await build(config, this.settings.baseDirectory);\n  }\n  \n  async installModule(npmName) {\n    // 1. Check if module exists in node_modules, if not then install it\n    let moduleDir = path.join(this.settings.baseDirectory, 'node_modules', npmName);\n    try {\n      await fs.promise.access();\n    } catch (error) {\n      await new Promise((resolve, reject) => {\n        let options = { cwd: directory };\n        child_process.exec(`npm install ${npmName}`, options, (processError, stdout, stderr) => {\n          if (processError) {\n            let error = new Error('Could not create Podfile:\\n' + stdout);\n            error.cause = processError;\n            error.stdout = stdout;\n            error.stderr = stderr;\n            reject(error);\n          } else {\n            resolve({stdout, stderr});\n          }\n        });\n      });\n    }\n    // 2. Open the module's package.json\n    let packageJSONPath = path.join(moduleDir, 'package.json');\n    let packageJSON = JSON.parse(await readAsync(packageJSONPath));\n    // 3. Check the package.json for the \"rem\" key (use the constant provided by Settings)\n    // and verify that it is a rem module\n    if (!packageJSON.rem || !packageJSON.rem.module) {\n      return console.error(\"Unable to install module via rem, it does not appear to be rem-enabled.\")\n    }\n    // 4. Read the targetDirectories object to determine the location of the various target\n    // sources.\n    let appTargetDirectories = this.settings.npm.rem.targetDirectories;\n    let moduleTargetDirectories = packageJSON.rem.targetDirectories;\n    // 5. For each target directory of the current app (apps and modules both have a targetDirectories object)\n    // add the corresponding BUCK file from the module's target directory to the app's BUCK file dependencies\n    let appSupportedTargets = Object.keys(appTargetDirectories);\n    appSupportedTargets.forEach(target => {\n      let targetDirectory = moduleTargetDirectories[target];\n      if (!targetDirectory) {\n        return console.warn(`Target \"${target}\" is unsupported by ${npmName}`);\n      }\n      let moduleTargetBuckPath = path.join(moduleDir, targetDirectory);\n      let appTargetBuckPath = path.join(this.settings.baseDirectory, appTargetDirectories[target]);\n      let buckDependencyPath = path.relative(appTargetBuckPath, moduleTargetBuckPath);\n      let buckDependency = `//${buckDependencyPath}/:${Settings.MODULE_BUCK_RULE_KEY}`;\n      console.log(buckDependency);\n    });\n  }\n  \n  isInitialized() {\n    return this.settings.isRemEnabled;\n  }\n  \n  isApp() {\n    return !this.settings.isModule;\n  }\n}"],"sourceRoot":"/source/"}