{"version":3,"sources":["BuckBuilder.js"],"names":[],"mappings":";;;;;;;;;;;;;0BAAuB,YAAY;;;;6BACJ,kBAAkB;;IAArC,aAAa;;iCACW,uBAAuB;;;;AAE3D,SAAS,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE;AACvC,MAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACnC,WAAO;GACR;AACD,MAAI,aAAa,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AACrC,UAAQ,GAAG,6BAAW,QAAQ,CAAC,CAAC;;AAEhC,MAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;AAC5D,WAAO,aAAa,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;GAC7D,MACI,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;AAC1C,WAAO,aAAa,CAAC,cAAc,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;GAC9D;;AAED,SAAO,IAAI,CAAC;CACb;;AAED,SAAS,WAAW,CAAC,MAAM,EAAE;AAC3B,MAAI,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AACnC,MAAI,UAAU,GAAG,aAAY,MAAM,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC;WAAI,CAAC,CAAC,CAAC;GAAA,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACxG,SAAO,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;CACnD;;AAEM,SAAS,yBAAyB,CAAC,OAAO,EAAE,oBAAoB,EAAE;AACvE,MAAI,YAAY,GAAG,EAAE,CAAC;AACtB,eAAY,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,CAAC,EAAI;AAChC,gBAAY,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,CAAC;mBAAQ,oBAAoB,SAAI,CAAC,CAAC,IAAI,SAAI,CAAC,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC,CAAC;KAAG,CAAC,CAAC;GAC/H,CAAC,CAAC;;AAEH,SAAO,oCAAwB,YAAY,CAAC,CAAC;CAC9C","file":"BuckBuilder.js","sourcesContent":["import decamelize from 'decamelize';\nimport * as buckTemplates from './templates/buck';\nimport buckDefinitionsTemplate from './templates/buck/DEFS';\n\nfunction buildProperty(target, property) {\n  if (property.indexOf('buck.') === 0) {\n    return;\n  }\n  let propertyValue = target[property];\n  property = decamelize(property);\n  \n  if (Array.isArray(propertyValue) && propertyValue.length > 0) {\n    return buckTemplates.arrayProperty(property, propertyValue);\n  }\n  else if (typeof propertyValue === 'string') {\n    return buckTemplates.stringProperty(property, propertyValue);\n  }\n  \n  return null;\n}\n\nfunction buildTarget(target) {\n  let buckType = target['buck.type'];\n  let properties = Object.keys(target).map(buildProperty.bind(this, target)).filter(p => !!p).join(',\\n');\n  return buckTemplates.target(buckType, properties);\n}\n\nexport function buildDefinitionForTargets(targets, nodeModulesDirectory) {\n  let dependencies = {};\n  Object.keys(targets).forEach(t => {\n    dependencies[t] = targets[t].packages.map(p => `/${nodeModulesDirectory}/${p.name}/${p.nativePackage.targetDirectories[t]}:`);\n  });\n   \n  return buckDefinitionsTemplate(dependencies);\n}"],"sourceRoot":"/source/"}