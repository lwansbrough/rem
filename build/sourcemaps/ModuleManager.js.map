{"version":3,"sources":["ModuleManager.js"],"names":[],"mappings":";;;;;;;;;;;;;;IAKe,SAAS,qBAAxB,WAAyB,IAAI,EAAE;AAC7B,MAAI;AACF,WAAO,MAAM,gBAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;GAChD,CAAC,OAAO,KAAK,EAAE;AACd,QAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3B,aAAO,IAAI,CAAC;KACb;AACD,UAAM,KAAK,CAAC;GACb;CACF;;kBAdc,IAAI;;;;oBACF,MAAM;;;;+BACD,oBAAoB;;wBACrB,YAAY;;;;IAaZ,aAAa;AAErB,WAFQ,aAAa,CAEpB,QAAQ,EAAE;0BAFH,aAAa;;AAG9B,QAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;GAC1B;;eAJkB,aAAa;;6BAMb,WAAC,MAAM,EAAE;AAC1B,UAAI,eAAe,GAAG,kBAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;AAC7E,UAAI,WAAW,GAAG,IAAI,CAAC,KAAK,EAAC,MAAM,SAAS,CAAC,eAAe,CAAC,CAAA,CAAC,CAAC;;AAE/D,iBAAW,CAAC,GAAG,GAAG,sBAAS,sBAAsB,EAAE,CAAC;;AAEpD,iBAAW,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAC;;AAEhD,UAAI,WAAW,GAAG,CAAC,mCAAmC,GAAE,MAAM,CAAC,OAAO,EAAC,uDAAuD,CAAC,CAAC;;AAEhI,UAAI,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE;AACnC,eAAO,CAAC,IAAI,CAAC,8GAA8G,CAAC,CAAC;AAC7H,mBAAW,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAE,WAAW,CAAC,OAAO,CAAC,WAAW,EAAC,MAAM,GAAE,WAAW,EAAC,CAAC,CAAC,CAAC;OAC9F,MACI;AACH,mBAAW,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;OAC/C;;AAED,YAAM,gBAAG,OAAO,CAAC,SAAS,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;;AAE1F,aAAO,MAAM,4BAAM,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;KACzD;;;WAEY,yBAAG;AACd,aAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;KACnC;;;WAEO,oBAAG;AACT,aAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;KAC/B;;;SAnCkB,aAAa;;;qBAAb,aAAa","file":"ModuleManager.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport { build } from './templates/module';\nimport Settings from './Settings';\n\nasync function readAsync(path) {\n  try {\n    return await fs.promise.readFile(path, 'utf8');\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport default class ModuleManager {\n  \n  constructor(settings) {\n    this.settings = settings;\n  }\n  \n  async createProject(config) {\n    let packageJSONPath = path.join(this.settings.baseDirectory, 'package.json');\n    let packageJSON = JSON.parse(await readAsync(packageJSONPath));\n    \n    packageJSON.rem = Settings.generateModuleSettings();\n    \n    packageJSON.scripts = packageJSON.scripts || {};\n    \n    let postinstall = `bash -c 'cd ../../ && (rem install ${config.npmName} || echo \\\"Install rem then reinstall this package.\\\")'`;\n    \n    if (packageJSON.scripts.postinstall) {\n      console.warn(\"Combining postinstall scripts -- please verify this has been handled correctly once the build has completed.\");\n      packageJSON.scripts.postinstall = `(${packageJSON.scripts.postinstall}) && (${postinstall})`;\n    }\n    else {\n      packageJSON.scripts.postinstall = postinstall;\n    }\n    \n    await fs.promise.writeFile(packageJSONPath, JSON.stringify(packageJSON, null, 2), 'utf8');\n    \n    return await build(config, this.settings.baseDirectory);\n  }\n  \n  isInitialized() {\n    return this.settings.isRemEnabled;\n  }\n  \n  isModule() {\n    return this.settings.isModule;\n  }\n}"],"sourceRoot":"/source/"}