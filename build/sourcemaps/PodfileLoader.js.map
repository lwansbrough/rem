{"version":3,"sources":["PodfileLoader.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAEb,OAAO,CAAC,cAAc,CAAC,CAAC;;AAExB,MAAM,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;IAEnB,aAAa;AAEN,WAFP,aAAa,CAEL,QAAkB,EAAE;0BAF5B,aAAa;;AAGf,QAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;GAC1B;;;;;;;eAJG,aAAa;;6BAUK,aAAW;AAC/B,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC/C,UAAI,QAAQ,EAAE;AACZ,eAAO,QAAQ,CAAC;OACjB;;AAED,YAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAClC,cAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AACrC,UAAI,CAAC,QAAQ,EAAE;AACb,cAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;OAC1E;AACD,aAAO,QAAQ,CAAC;KACjB;;;;;;;;6BAMc,aAAY;AACzB,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAClD,UAAI;AACF,eAAO,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;OACvD,CAAC,OAAO,KAAK,EAAE;AACd,YAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3B,iBAAO,IAAI,CAAC;SACb;AACD,cAAM,KAAK,CAAC;OACb;KACF;;;;;;;6BAKe,WAAC,QAAgB,EAAE;AACjC,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAClD,YAAM,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KAC3D;;;;;;;WAKU,uBAAY;;;AACrB,aAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,YAAI,SAAS,GAAG,MAAK,QAAQ,CAAC,qBAAqB,CAAC;AACpD,YAAI,OAAO,GAAG,EAAC,GAAG,EAAE,SAAS,EAAC,CAAC;AAC/B,qBAAa,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,UAAC,YAAY,EAAE,MAAM,EAAE,MAAM,EAAK;AACxE,cAAI,YAAY,EAAE;AAChB,gBAAI,KAAK,GAAG,IAAI,KAAK,CAAC,6BAA6B,GAAG,MAAM,CAAC,CAAC;AAC9D,iBAAK,CAAC,KAAK,GAAG,YAAY,CAAC;AAC3B,iBAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,iBAAK,CAAC,MAAM,GAAG,MAAM,CAAC;AACtB,kBAAM,CAAC,KAAK,CAAC,CAAC;WACf,MAAM;AACL,mBAAO,CAAC,EAAC,MAAM,EAAN,MAAM,EAAE,MAAM,EAAN,MAAM,EAAC,CAAC,CAAC;WAC3B;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;KACJ;;;SAtEG,aAAa;;;qBAyEJ,aAAa","file":"PodfileLoader.js","sourcesContent":["'use strict';\n\nrequire('instapromise');\n\nconst child_process = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nclass PodfileLoader {\n\n  constructor(settings: Settings) {\n    this.settings = settings;\n  }\n\n  /**\n   * Reads the Podfile in the given directory, creating one if it doesn't exist,\n   * and returns its contents\n   */\n  async readEnsuredAsync(): string {\n    let directory = this.settings.xcodeProjectDirectory;\n    var contents = await this.readAsync(directory);\n    if (contents) {\n      return contents;\n    }\n\n    await this.createAsync(directory);\n    contents = this.readAsync(directory);\n    if (!contents) {\n      throw new Error('Created a Podfile but was unable to read its contents');\n    }\n    return contents;\n  }\n\n  /**\n   * Reads the Podfile in the given directory and returns its contents, or null\n   * if it doesn't exist\n   */\n  async readAsync(): ?string {\n    let directory = this.settings.xcodeProjectDirectory;\n    let podfilePath = path.join(directory, 'Podfile');\n    try {\n      return await fs.promise.readFile(podfilePath, 'utf8');\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Writes the Podfile in the given directory.\n   */\n  async writeAsync(contents: string) {\n    let directory = this.settings.xcodeProjectDirectory;\n    let podfilePath = path.join(directory, 'Podfile');\n    await fs.promise.writeFile(podfilePath, contents, 'utf8');\n  }\n\n  /**\n   * Creates a Podfile in the given directory with the help of `pod`\n   */\n  createAsync(): ?string {\n    return new Promise((resolve, reject) => {\n      let directory = this.settings.xcodeProjectDirectory;\n      let options = {cwd: directory};\n      child_process.exec('pod init', options, (processError, stdout, stderr) => {\n        if (processError) {\n          let error = new Error('Could not create Podfile:\\n' + stdout);\n          error.cause = processError;\n          error.stdout = stdout;\n          error.stderr = stderr;\n          reject(error);\n        } else {\n          resolve({stdout, stderr});\n        }\n      });\n    });\n  }\n}\n\nexport default PodfileLoader;\n"],"sourceRoot":"/source/"}