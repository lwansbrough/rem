{"version":3,"sources":["BuckLoader.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;IAMS,IAAI,qBAAnB,WAAoB,QAAQ,EAAE;AACnC,SAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,QAAI,0BAAwB,QAAQ,QAAK,UAAS,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AACrE,UAAI,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5B,aAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KAC7B,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAXD,IAAM,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC;AAC3C,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC","file":"BuckLoader.js","sourcesContent":["'use strict';\n\nconst exec = require('child_process').exec;\nconst path = require('path');\nconst fs = require('fs');\n\nexport async function load(buckPath) {\n  return new Promise((resolve, reject) => {\n    exec(`buck targets --json ${buckPath}:`, function(err, stdout, stderr) {\n      if (err) return reject(err);\n      resolve(JSON.parse(stdout));\n    });\n  });\n}\n\n\n\n// \n// class BuckLoader {\n// \n//   constructor(settings: Settings) {\n//     this.settings = settings;\n//   }\n// \n//   /**\n//    * Reads the BUCK file in the given directory, creating one if it doesn't exist,\n//    * and returns its contents\n//    */\n//   async readEnsuredAsync(): string {\n//     let directory = this.settings.xcodeProjectDirectory;\n//     var contents = await this.readAsync(directory);\n//     if (contents) {\n//       return contents;\n//     }\n// \n//     await this.createAsync(directory);\n//     contents = this.readAsync(directory);\n//     if (!contents) {\n//       throw new Error('Created a Podfile but was unable to read its contents');\n//     }\n//     return contents;\n//   }\n// \n//   /**\n//    * Reads the BUCK file in the given directory and returns its contents, or null\n//    * if it doesn't exist\n//    */\n//   async readAsync(): ?string {\n//     let directory = this.settings.xcodeProjectDirectory;\n//     let buckPath = path.join(directory, 'BUCK');\n//     try {\n//       return await fs.promise.readFile(buckPath, 'utf8');\n//     } catch (error) {\n//       if (error.code === 'ENOENT') {\n//         return null;\n//       }\n//       throw error;\n//     }\n//   }\n// \n//   /**\n//    * Writes the BUCK file in the given directory.\n//    */\n//   async writeAsync(contents: string) {\n//     let directory = this.settings.xcodeProjectDirectory;\n//     let buckPath = path.join(directory, 'BUCK');\n//     await fs.promise.writeFile(buckPath, contents, 'utf8');\n//   }\n// \n//   /**\n//    * Creates a module BUCK file in the given directory.\n//    */\n//   async createModuleAsync(directory: string): ?string {\n//     return await writeAsync(directory, '');\n//   }\n// }\n// \n// export default BuckLoader;\n"],"sourceRoot":"/source/"}