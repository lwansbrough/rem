{"version":3,"sources":["BuckLoader.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;AAEb,OAAO,CAAC,cAAc,CAAC,CAAC;;AAExB,MAAM,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;;IAEnB,UAAU;AAEH,WAFP,UAAU,CAEF,QAAkB,EAAE;0BAF5B,UAAU;;AAGZ,QAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;GAC1B;;;;;;;eAJG,UAAU;;6BAUQ,aAAW;AAC/B,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC/C,UAAI,QAAQ,EAAE;AACZ,eAAO,QAAQ,CAAC;OACjB;;AAED,YAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AAClC,cAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AACrC,UAAI,CAAC,QAAQ,EAAE;AACb,cAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;OAC1E;AACD,aAAO,QAAQ,CAAC;KACjB;;;;;;;;6BAMc,aAAY;AACzB,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C,UAAI;AACF,eAAO,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;OACpD,CAAC,OAAO,KAAK,EAAE;AACd,YAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3B,iBAAO,IAAI,CAAC;SACb;AACD,cAAM,KAAK,CAAC;OACb;KACF;;;;;;;6BAKe,WAAC,QAAgB,EAAE;AACjC,UAAI,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;AACpD,UAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAC5C,YAAM,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;KACxD;;;;;;;6BAKsB,WAAC,SAAiB,EAAW;AAClD,aAAO,MAAM,UAAU,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;KACxC;;;SAxDG,UAAU;;;qBA2DD,UAAU","file":"BuckLoader.js","sourcesContent":["'use strict';\n\nrequire('instapromise');\n\nconst child_process = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\n\nclass BuckLoader {\n\n  constructor(settings: Settings) {\n    this.settings = settings;\n  }\n\n  /**\n   * Reads the BUCK file in the given directory, creating one if it doesn't exist,\n   * and returns its contents\n   */\n  async readEnsuredAsync(): string {\n    let directory = this.settings.xcodeProjectDirectory;\n    var contents = await this.readAsync(directory);\n    if (contents) {\n      return contents;\n    }\n\n    await this.createAsync(directory);\n    contents = this.readAsync(directory);\n    if (!contents) {\n      throw new Error('Created a Podfile but was unable to read its contents');\n    }\n    return contents;\n  }\n\n  /**\n   * Reads the BUCK file in the given directory and returns its contents, or null\n   * if it doesn't exist\n   */\n  async readAsync(): ?string {\n    let directory = this.settings.xcodeProjectDirectory;\n    let buckPath = path.join(directory, 'BUCK');\n    try {\n      return await fs.promise.readFile(buckPath, 'utf8');\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Writes the BUCK file in the given directory.\n   */\n  async writeAsync(contents: string) {\n    let directory = this.settings.xcodeProjectDirectory;\n    let buckPath = path.join(directory, 'BUCK');\n    await fs.promise.writeFile(buckPath, contents, 'utf8');\n  }\n\n  /**\n   * Creates a module BUCK file in the given directory.\n   */\n  async createModuleAsync(directory: string): ?string {\n    return await writeAsync(directory, '');\n  }\n}\n\nexport default BuckLoader;\n"],"sourceRoot":"/source/"}