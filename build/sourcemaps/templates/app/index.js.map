{"version":3,"sources":["templates/app/index.js"],"names":[],"mappings":"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","file":"templates/app/index.js","sourcesContent":["const fs = require('fs');\nimport path from 'path';\nimport walk from 'walk';\nimport mkdirp from 'mkdirp';\n\nconst sourcePath = path.join(__dirname, 'src');\n\nasync function writeAsync(directory, filename, contents) {\n  return new Promise((resolve, reject) => {\n    mkdirp(directory, async (err) => {\n      if (err) return reject(err);\n      let filePath = path.join(directory, filename);\n      await fs.promise.writeFile(filePath, contents, 'utf8');\n      resolve();\n    });\n  });\n}\n\nfunction walkerErrorHandler(root, nodeStatsArray, next) {\n  nodeStatsArray.forEach(n => {\n    console.error(`[ERROR] ${n.name}`);\n    console.error(n.error.message || (n.error.code + \": \" + n.error.path));\n  });\n  next();\n}\n\nfunction createWalkerFileHandler(config, directory) {\n  \n  return async (root, stat, next) => {\n    let originalPath = path.join(root, stat.name);\n    delete require.cache[originalPath];\n    let template = require(originalPath);\n    let relativePath = root.replace(sourcePath, '.');\n    let finalPath = path.join(directory, relativePath);\n\n    // Ensure Android's Java files are added into a folder structure matching the package identifier\n    if (relativePath === './android/src/main/java') {\n      finalPath = path.join(finalPath, config.android.packageIdentifier.replace(new RegExp('\\\\.', 'g'), '/'));\n    }\n    \n    let lastDotIndex = stat.name.lastIndexOf('.');\n    let extension = stat.name.slice(lastDotIndex);\n    if (extension === '.js') {\n      stat.name = stat.name.slice(0, lastDotIndex);\n    }\n  \n    await writeAsync(finalPath, stat.name, template(config));\n    next(); \n  }\n}\n\nexport async function build(config, directory) {\n  \n  let walkerFileHandler = createWalkerFileHandler(config, directory);\n  \n  return new Promise((resolve, reject) => {\n    let walker = walk.walk(sourcePath);\n    walker.on('file', walkerFileHandler);\n    walker.on('errors', walkerErrorHandler);\n    walker.on('end', resolve);\n  });\n}"],"sourceRoot":"/source/"}