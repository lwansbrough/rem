{"version":3,"sources":["templates/module/index.js"],"names":[],"mappings":"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","file":"templates/module/index.js","sourcesContent":["const fs = require('fs');\nimport path from 'path';\nimport walk from 'walk';\nimport mkdirp from 'mkdirp';\n\nasync function readAsync(path) {\n  try {\n    return await fs.promise.readFile(path, 'utf8');\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return null;\n    }\n    throw error;\n  }\n}\n\nasync function writeAsync(directory, filename, contents) {\n  return new Promise((resolve, reject) => {\n    mkdirp(directory, async (err, success) => {\n      if (err || !success) return reject(err || new Error('Failed to create directory.'));\n      let filePath = path.join(directory, filename);\n      await fs.promise.writeFile(filePath, contents, 'utf8');\n      resolve();\n    });\n  });\n}\n\nfunction fixPath(config, path) {\n  let keys = Object.keys(config);\n  keys.forEach((value, key) => {\n    path = path.replace(`__${key}__`, value);\n  });\n  return path;\n}\n\nexport async function build(config, directory) {\n  \n  let pathConfig = {\n    moduleName: config.moduleName,\n    moduleNameAndroid: config.android.moduleName,\n    moduleNameIOS: config.ios.moduleName\n  };\n  \n  return new Promise((resolve, reject) => {\n    let walker = walk.walk('./src', { followLinks: false });\n    \n    walker.on('file', async (basedir, stat, next) => {\n      basedir = basedir.replace('src/templates/module/src/', '');\n        \n      if (basedir === 'android/src/main/java') {\n        basedir += '/' + config.packageName.replace('.', '/');\n      }\n      \n      let fixedBaseDir = fixPath(pathConfig, basedir);\n      let fixedFilename = fixPath(pathConfig, filename);\n      let path = `${fixedBaseDir}/${fixedFilename}`;\n      let template = await readAsync(path);\n      \n      let lastDotIndex = path.lastIndexOf('.');\n      let extension = path.slice(lastDotIndex);\n      if (extension === '.js') {\n        path = path.slice(0, lastDotIndex);\n      }\n      \n      await writeAsync(fixedBaseDir, fixedFilename, template(config));\n      next();\n    });\n    \n    walker.on('end', resolve);\n  });\n}"],"sourceRoot":"/source/"}